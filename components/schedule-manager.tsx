"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { useIsMobile } from "@/hooks/use-mobile"
import { toast } from "sonner"
import { 
  Appointment, 
  ServiceType, 
  CreateAppointmentRequest,
  getTodayAppointments,
  getAppointments,
  getAppointmentDetail,
  createAppointment,
  updateAppointment,
  deleteAppointment,
  completeAppointment,
  cancelAppointment as cancelAppointmentAPI,
  getServiceTypes,
  getFamilies,
  getSystemDefaultPackages,
  ServicePackage 
} from "@/lib/api"
import {
  Clock,
  MapPin,
  User,
  Package,
  Phone,
  CheckCircle,
  AlertCircle,
  Play,
  ChevronLeft,
  ChevronRight,
  Plus,
  Edit,
  X,
  FileText,
} from "lucide-react"

// ‰ΩøÁî®‰ªé API ÂØºÂÖ•ÁöÑ Appointment Êé•Âè£

// ÁßªÈô§Ê®°ÊãüÊï∞ÊçÆÔºå‰ΩøÁî®ÁúüÂÆûAPIÊï∞ÊçÆ

// Â∑•ÂÖ∑ÂáΩÊï∞ÔºöËé∑ÂèñÂåó‰∫¨Êó∂Èó¥ÁöÑÊó•ÊúüÂ≠óÁ¨¶‰∏≤ (YYYY-MM-DD)
const getBeijingDateString = (date: Date): string => {
  // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑDateÂØπË±°ÔºåÈÅøÂÖç‰øÆÊîπÂéüÂØπË±°
  const beijingDate = new Date(date.getTime())
  
  // Ëé∑ÂèñÂåó‰∫¨Êó∂Èó¥ÁöÑÂπ¥ÊúàÊó• (ÈÅøÂÖçÊó∂Âå∫ËΩ¨Êç¢ÈóÆÈ¢ò)
  const year = beijingDate.getFullYear()
  const month = String(beijingDate.getMonth() + 1).padStart(2, '0')
  const day = String(beijingDate.getDate()).padStart(2, '0')
  
  return `${year}-${month}-${day}`
}

// Â∑•ÂÖ∑ÂáΩÊï∞ÔºöËé∑ÂèñÂåó‰∫¨Êó∂Èó¥ÁöÑ‰ªäÂ§©
const getBeijingToday = (): Date => {
  return new Date()
}

export function ScheduleManager() {
  const router = useRouter()
  const [selectedDate, setSelectedDate] = useState(() => {
    // Ëé∑ÂèñÂåó‰∫¨Êó∂Èó¥ÁöÑ‰ªäÂ§©
    return getBeijingToday()
  })
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null)
  const [showNewAppointmentModal, setShowNewAppointmentModal] = useState(false)
  const [showEditAppointmentModal, setShowEditAppointmentModal] = useState(false)
  const [appointments, setAppointments] = useState<Appointment[]>([])
  const [serviceTypes, setServiceTypes] = useState<ServiceType[]>([])
  const [families, setFamilies] = useState<any[]>([])
  const [servicePackages, setServicePackages] = useState<ServicePackage[]>([])
  const [loading, setLoading] = useState(true)
  const [showRescheduleModal, setShowRescheduleModal] = useState(false)
  const [rescheduleAppointment, setRescheduleAppointment] = useState<Appointment | null>(null)
  const [rescheduleDate, setRescheduleDate] = useState("")
  const [rescheduleTime, setRescheduleTime] = useState("")
  const [showCancelConfirmModal, setShowCancelConfirmModal] = useState(false)
  const [cancelAppointment, setCancelAppointment] = useState<Appointment | null>(null)
  const [showStartConfirmModal, setShowStartConfirmModal] = useState(false)
  const [startAppointment, setStartAppointment] = useState<Appointment | null>(null)
  const isMobile = useIsMobile()
  // Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥ÔºåÂπ∂ËÆæÁΩÆÈªòËÆ§Êó∂Èó¥‰∏∫‰∏ÄÂ∞èÊó∂Âêé
  const getDefaultDateTime = () => {
    const now = getBeijingToday()
    const defaultTime = new Date(now.getTime() + 60 * 60 * 1000) // ‰∏ÄÂ∞èÊó∂Âêé
    return {
      date: getBeijingDateString(now),
      time: defaultTime.toTimeString().slice(0, 5) // HH:MMÊ†ºÂºè
    }
  }

  const [newAppointment, setNewAppointment] = useState({
    patient_id: 0,
    service_type_id: undefined,
    scheduled_date: getDefaultDateTime().date,
    start_time: getDefaultDateTime().time,
    end_time: "",
    duration_minutes: 60, // ÈªòËÆ§1Â∞èÊó∂
    appointment_type: "regular",
    status: "scheduled",
    notes: ""
  })
  // Âä†ËΩΩÊï∞ÊçÆ
  useEffect(() => {
    loadInitialData()
    loadAppointmentsByDate()
  }, [])

  const loadInitialData = async () => {
    try {
      console.log('ScheduleManager: ÂºÄÂßãÂä†ËΩΩÂàùÂßãÊï∞ÊçÆ')
      const [serviceTypesResponse, familiesResponse, servicePackagesResponse] = await Promise.all([
        getServiceTypes(),
        getFamilies(1, 100), // Ëé∑ÂèñÂâç100‰∏™ÂÆ∂Â∫≠
        getSystemDefaultPackages() // Ëé∑ÂèñÊúçÂä°Â•óÈ§ê
      ])
      
      console.log('ScheduleManager: Âä†ËΩΩÊúçÂä°Á±ªÂûã', serviceTypesResponse.data)
      console.log('ScheduleManager: Âä†ËΩΩÂÆ∂Â∫≠Êï∞ÊçÆ', familiesResponse.data)
      console.log('ScheduleManager: ÂÆ∂Â∫≠Êï∞ÊçÆÁªìÊûÑ', familiesResponse.data.families)
      console.log('ScheduleManager: Âä†ËΩΩÊúçÂä°Â•óÈ§ê', servicePackagesResponse.data)
      
      setServiceTypes(serviceTypesResponse.data)
      setFamilies(familiesResponse.data.families)
      setServicePackages(servicePackagesResponse.data)
      
      // ËÆæÁΩÆÈªòËÆ§È¢ÑÁ∫¶Êó•ÊúüÂíåÊó∂Èó¥
      const defaultDateTime = getDefaultDateTime()
      setNewAppointment(prev => ({
        ...prev,
        scheduled_date: defaultDateTime.date,
        start_time: defaultDateTime.time
      }))
      
    } catch (error) {
      console.error('ScheduleManager: Âä†ËΩΩÂàùÂßãÊï∞ÊçÆÂ§±Ë¥•', error)
      toast.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï')
    }
  }

  const loadAppointmentsByDate = async (dateToUse?: Date) => {
    try {
      setLoading(true)
      
      // ‰ΩøÁî®‰º†ÂÖ•ÁöÑÊó•ÊúüÊàñÂΩìÂâçÈÄâÊã©ÁöÑÊó•Êúü
      const targetDate = dateToUse || selectedDate
      const selectedDateStr = getBeijingDateString(targetDate)
      const todayStr = getBeijingDateString(getBeijingToday())
      
      console.log('üìÖ ====== Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆÂºÄÂßã ====== (‰ΩøÁî®Âåó‰∫¨Êó∂Èó¥)')
      console.log('üìÖ ÁõÆÊ†áÊó•ÊúüÂØπË±°:', targetDate)
      console.log('üìÖ ÁõÆÊ†áÊó•ÊúüÂ≠óÁ¨¶‰∏≤ (Âåó‰∫¨Êó∂Èó¥):', selectedDateStr)
      console.log('üìÖ ‰ªäÂ§©Êó•ÊúüÂØπË±°:', getBeijingToday())
      console.log('üìÖ ‰ªäÂ§©Â≠óÁ¨¶‰∏≤ (Âåó‰∫¨Êó∂Èó¥):', todayStr)
      console.log('üìÖ Êó•ÊúüÂ≠óÁ¨¶‰∏≤ÊØîËæÉ selectedDateStr === todayStr:', selectedDateStr === todayStr)
      
      let response
      // Â¶ÇÊûúÈÄâÊã©ÁöÑÊòØ‰ªäÂ§©Ôºå‰ΩøÁî®Êó•ÊúüËåÉÂõ¥Êü•ËØ¢‰ª•Ëé∑ÂèñÊâÄÊúâÁä∂ÊÄÅÁöÑÈ¢ÑÁ∫¶
      if (selectedDateStr === todayStr) {
        console.log('üìÖ ‰ΩøÁî®Êó•ÊúüËåÉÂõ¥Êü•ËØ¢Ëé∑Âèñ‰ªäÊó•ÊâÄÊúâÈ¢ÑÁ∫¶ÔºàÂåÖÊã¨ÊâÄÊúâÁä∂ÊÄÅÔºâ')
        response = await getAppointments(1, 100, '', selectedDateStr, selectedDateStr)
        console.log('üìÖ APIÂìçÂ∫î:', response)
        console.log('üìÖ ‰ªäÊó•È¢ÑÁ∫¶Êï∞Èáè', response.data.appointments?.length || 0)
        console.log('üìÖ ‰ªäÊó•È¢ÑÁ∫¶ËØ¶ÊÉÖ', response.data.appointments)
        
        // ËØ¶ÁªÜËÆ∞ÂΩïÊØè‰∏™È¢ÑÁ∫¶ÁöÑÁä∂ÊÄÅ
        if (response.data.appointments && response.data.appointments.length > 0) {
          console.log('üìÖ ÊØè‰∏™È¢ÑÁ∫¶ÁöÑËØ¶ÁªÜÁä∂ÊÄÅ:')
          response.data.appointments.forEach((apt, index) => {
            console.log(`üìÖ   [${index}] ID:${apt.id}, Áä∂ÊÄÅ:${apt.status}, ÊÇ£ËÄÖ:${apt.patient?.name}, Êó∂Èó¥:${apt.start_time}`)
          })
        }
        
        setAppointments(response.data.appointments || [])
      } else {
        // Â¶ÇÊûúÈÄâÊã©ÁöÑ‰∏çÊòØ‰ªäÂ§©Ôºå‰ΩøÁî®Êó•ÊúüËåÉÂõ¥Êü•ËØ¢
        console.log('üìÖ ‰ΩøÁî®Êó•ÊúüËåÉÂõ¥Êü•ËØ¢ÔºåÊó•Êúü:', selectedDateStr)
        response = await getAppointments(1, 100, '', selectedDateStr, selectedDateStr)
        console.log('üìÖ APIÂìçÂ∫î:', response)
        console.log('üìÖ ÊåáÂÆöÊó•ÊúüÈ¢ÑÁ∫¶Êï∞Èáè', response.data.appointments?.length || 0)
        setAppointments(response.data.appointments || [])
      }
      
      console.log('üìÖ ====== Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆÂÆåÊàê ======')
      
    } catch (error) {
      console.error('‚ùå ScheduleManager: Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆÂ§±Ë¥•', error)
      console.error('‚ùå ÈîôËØØËØ¶ÊÉÖ:', error)
      toast.error('Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆÂ§±Ë¥•')
      setAppointments([])
    } finally {
      setLoading(false)
    }
  }

  const loadTodayAppointments = async () => {
    try {
      setLoading(true)
      console.log('ScheduleManager: Âä†ËΩΩ‰ªäÊó•È¢ÑÁ∫¶')
      
      const response = await getTodayAppointments()
      console.log('ScheduleManager: ‰ªäÊó•È¢ÑÁ∫¶Êï∞ÊçÆ', response.data)
      setAppointments(response.data.appointments || [])
    } catch (error) {
      console.error('ScheduleManager: Âä†ËΩΩ‰ªäÊó•È¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('Âä†ËΩΩ‰ªäÊó•È¢ÑÁ∫¶Â§±Ë¥•')
      setAppointments([])
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (date: Date) => {
    return date.toLocaleDateString("zh-CN", {
      year: "numeric",
      month: "long",
      day: "numeric",
      weekday: "long",
    })
  }

  // Ëé∑ÂèñÂÆ∂Â∫≠ÁöÑÂ•óÈ§ê‰ø°ÊÅØ
  const getFamilyPackageInfo = (patientId: number) => {
    console.log('ScheduleManager: Êü•ÊâæÊÇ£ËÄÖÂ•óÈ§ê‰ø°ÊÅØ', patientId, families)
    
    // Êü•ÊâæÊÇ£ËÄÖÊâÄÂ±ûÁöÑÂÆ∂Â∫≠
    const family = families.find(fam => 
      fam.members && fam.members.some((member: any) => member.id === patientId)
    )
    
    if (family) {
      console.log('ScheduleManager: ÊâæÂà∞ÂÆ∂Â∫≠', family)
      // Êü•ÊâæÊà∑‰∏ª‰ø°ÊÅØ
      const householdHead = family.members.find((member: any) => 
        member.relationship === 'Êà∑‰∏ª' || member.relationship === 'householdHead'
      )
      
      if (householdHead) {
        console.log('ScheduleManager: ÊâæÂà∞Êà∑‰∏ª', householdHead)
        // Êü•ÊâæÂØπÂ∫îÁöÑÊúçÂä°Â•óÈ§ê
        const servicePackage = servicePackages.find(pkg => pkg.name === householdHead.packageType)
        return {
          householdHead: householdHead.name,
          packageName: householdHead.packageType,
          packageDetails: servicePackage
        }
      }
    }
    
    console.log('ScheduleManager: Êú™ÊâæÂà∞Â•óÈ§ê‰ø°ÊÅØ')
    return null
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "bg-green-100 text-green-700 border-green-200"
      case "confirmed":
        return "bg-orange-100 text-orange-700 border-orange-200"
      case "scheduled":
        return "bg-gray-100 text-gray-700 border-gray-200"
      case "cancelled":
        return "bg-red-100 text-red-700 border-red-200"
      case "rescheduled":
        return "bg-yellow-100 text-yellow-700 border-yellow-200"
      default:
        return "bg-gray-100 text-gray-700 border-gray-200"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "completed":
        return "Â∑≤ÂÆåÊàê"
      case "confirmed":
        return "ËøõË°å‰∏≠"
      case "scheduled":
        return "ÂæÖÊúçÂä°"
      case "cancelled":
        return "Â∑≤ÂèñÊ∂à"
      case "rescheduled":
        return "Â∑≤ÊîπÊúü"
      default:
        return "Êú™Áü•"
    }
  }

  const navigateDate = (direction: "prev" | "next") => {
    console.log('üîÑ navigateDate - ÂºÄÂßãÂØºËà™ (‰ΩøÁî®Âåó‰∫¨Êó∂Èó¥)')
    console.log('  - ÊñπÂêë:', direction)
    console.log('  - ÂΩìÂâçselectedDate:', selectedDate)
    console.log('  - ÂΩìÂâçselectedDateÂ≠óÁ¨¶‰∏≤ (Âåó‰∫¨Êó∂Èó¥):', getBeijingDateString(selectedDate))
    
    const newDate = new Date(selectedDate)
    newDate.setDate(selectedDate.getDate() + (direction === "next" ? 1 : -1))
    
    console.log('  - Êñ∞ËÆ°ÁÆóÁöÑÊó•Êúü:', newDate)
    console.log('  - Êñ∞ËÆ°ÁÆóÁöÑÊó•ÊúüÂ≠óÁ¨¶‰∏≤ (Âåó‰∫¨Êó∂Èó¥):', getBeijingDateString(newDate))
    
    // üî• Âº∫Âà∂Ê∏ÖÁ©∫È¢ÑÁ∫¶ÂàóË°®ÔºåÈÅøÂÖçÊòæÁ§∫ÁºìÂ≠òÊï∞ÊçÆ
    console.log('üîÑ navigateDate - ÂÖàÊ∏ÖÁ©∫È¢ÑÁ∫¶ÂàóË°®ÔºåÈÅøÂÖçÊòæÁ§∫ÊóßÊï∞ÊçÆ')
    setAppointments([])
    
    setSelectedDate(newDate)
    
    console.log('üîÑ navigateDate - Áõ¥Êé•‰ΩøÁî®Êñ∞Êó•ÊúüË∞ÉÁî®loadAppointmentsByDate')
    loadAppointmentsByDate(newDate) // Áõ¥Êé•‰º†ÈÄíÊñ∞Êó•ÊúüÔºå‰∏ç‰æùËµñÁä∂ÊÄÅÊõ¥Êñ∞
  }

  // È™åËØÅÈ¢ÑÁ∫¶Êó∂Èó¥ÊòØÂê¶Âú®Êú™Êù•
  const validateAppointmentTime = (date: string, time: string) => {
    const appointmentDateTime = new Date(`${date} ${time}`)
    const now = new Date()
    return appointmentDateTime > now
  }

  const handleCreateAppointment = async () => {
    try {
      console.log("ScheduleManager: ÂàõÂª∫Êñ∞È¢ÑÁ∫¶", newAppointment)
      
      if (!newAppointment.patient_id || !newAppointment.start_time || !newAppointment.scheduled_date) {
        toast.error('ËØ∑Â°´ÂÜôÂøÖË¶ÅÁöÑÈ¢ÑÁ∫¶‰ø°ÊÅØ')
        return
      }
      
      // È™åËØÅÈ¢ÑÁ∫¶Êó∂Èó¥‰∏çËÉΩÊòØËøáÂéªÊó∂Èó¥
      if (!validateAppointmentTime(newAppointment.scheduled_date, newAppointment.start_time)) {
        toast.error('È¢ÑÁ∫¶Êó∂Èó¥‰∏çËÉΩÊòØËøáÂéªÊó∂Èó¥ÔºåËØ∑ÈÄâÊã©Êú™Êù•ÁöÑÊó∂Èó¥')
        return
      }
      
      // ÂáÜÂ§áÂèëÈÄÅÂà∞ÂêéÁ´ØÁöÑÊï∞ÊçÆÔºåÂ≠óÊÆµÊò†Â∞Ñ
      const appointmentData = {
        patient_id: newAppointment.patient_id,
        scheduled_date: newAppointment.scheduled_date,
        scheduled_time: newAppointment.start_time, // ÂêéÁ´ØÊúüÊúõÁöÑÊòØ scheduled_time
        appointment_type: newAppointment.appointment_type,
        status: newAppointment.status,
        notes: newAppointment.notes
      }
      
      const response = await createAppointment(appointmentData)
      console.log("ScheduleManager: ÂàõÂª∫È¢ÑÁ∫¶ÊàêÂäü", response.data)
      
      toast.success('È¢ÑÁ∫¶ÂàõÂª∫ÊàêÂäü')
      setShowNewAppointmentModal(false)
      
      // ÈáçÁΩÆË°®Âçï
      const defaultDateTime = getDefaultDateTime()
      setNewAppointment({
        patient_id: 0,
        service_type_id: undefined,
        scheduled_date: defaultDateTime.date,
        start_time: defaultDateTime.time,
        end_time: "",
        duration_minutes: 60,
        appointment_type: "regular",
        status: "scheduled",
        notes: ""
      })
      
      // Âº∫Âà∂Âà∑Êñ∞È¢ÑÁ∫¶ÂàóË°®
      console.log('ScheduleManager: È¢ÑÁ∫¶ÂàõÂª∫ÊàêÂäüÔºåÂº∫Âà∂Âà∑Êñ∞ÂàóË°®')
      
      // Â¶ÇÊûúÂàõÂª∫ÁöÑÈ¢ÑÁ∫¶‰∏çÊòØÂΩìÂâçÈÄâÊã©ÁöÑÊó•ÊúüÔºåÂàáÊç¢Âà∞È¢ÑÁ∫¶ÁöÑÊó•Êúü
      const appointmentDate = new Date(appointmentData.scheduled_date)
      const currentSelectedDate = selectedDate.toISOString().split('T')[0]
      
      console.log('ScheduleManager: È¢ÑÁ∫¶ÂàõÂª∫Êó•Êúü', appointmentData.scheduled_date)
      console.log('ScheduleManager: ÂΩìÂâçÈÄâÊã©Êó•Êúü', currentSelectedDate)
      
      if (appointmentData.scheduled_date !== currentSelectedDate) {
        console.log('ScheduleManager: ÂàáÊç¢Âà∞È¢ÑÁ∫¶Êó•Êúü')
        setSelectedDate(appointmentDate)
        await loadAppointmentsByDate(appointmentDate)
      } else {
        console.log('ScheduleManager: Âú®ÂΩìÂâçÊó•ÊúüÔºåÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ')
        // ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ
        await loadAppointmentsByDate()
      }
      
      // Â§áÁî®ÔºöÂ∞ùËØïÂä†ËΩΩÊâÄÊúâÈ¢ÑÁ∫¶Êù•È™åËØÅÈ¢ÑÁ∫¶ÊòØÂê¶ÁúüÁöÑÂàõÂª∫‰∫Ü
      try {
        console.log('ScheduleManager: Â§áÁî®È™åËØÅ - Ëé∑ÂèñÊâÄÊúâÈ¢ÑÁ∫¶')
        const allAppointmentsResponse = await getAppointments(1, 100, '', '', '')
        console.log('ScheduleManager: ÊâÄÊúâÈ¢ÑÁ∫¶', allAppointmentsResponse.data.appointments)
      } catch (error) {
        console.error('ScheduleManager: Ëé∑ÂèñÊâÄÊúâÈ¢ÑÁ∫¶Â§±Ë¥•', error)
      }
      
    } catch (error) {
      console.error('ScheduleManager: ÂàõÂª∫È¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('ÂàõÂª∫È¢ÑÁ∫¶Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  // ÊòæÁ§∫ÂèñÊ∂àÈ¢ÑÁ∫¶Á°ÆËÆ§Ê°Ü
  const handleCancelAppointment = (appointment: Appointment | number) => {
    console.log("ScheduleManager: ÊòæÁ§∫ÂèñÊ∂àÈ¢ÑÁ∫¶Á°ÆËÆ§Ê°Ü", appointment)
    
    if (typeof appointment === 'number') {
      // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊòØIDÔºåÈúÄË¶Å‰ªéappointments‰∏≠ÊâæÂà∞ÂØπÂ∫îÁöÑÈ¢ÑÁ∫¶
      const foundAppointment = appointments.find(appt => appt.id === appointment)
      if (foundAppointment) {
        setCancelAppointment(foundAppointment)
        setShowCancelConfirmModal(true)
      }
    } else {
      // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊòØÈ¢ÑÁ∫¶ÂØπË±°
      setCancelAppointment(appointment)
      setShowCancelConfirmModal(true)
    }
  }

  // Á°ÆËÆ§ÂèñÊ∂àÈ¢ÑÁ∫¶
  const confirmCancelAppointment = async () => {
    if (!cancelAppointment) return
    
    try {
      console.log("ScheduleManager: Á°ÆËÆ§ÂèñÊ∂àÈ¢ÑÁ∫¶", cancelAppointment.id)
      
      const response = await cancelAppointmentAPI(cancelAppointment.id)
      console.log("ScheduleManager: ÂèñÊ∂àÈ¢ÑÁ∫¶ÊàêÂäü", response.data)
      
      toast.success('È¢ÑÁ∫¶Â∑≤ÂèñÊ∂à')
      setShowCancelConfirmModal(false)
      setCancelAppointment(null)
      loadAppointmentsByDate()
    } catch (error) {
      console.error('ScheduleManager: ÂèñÊ∂àÈ¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('ÂèñÊ∂àÈ¢ÑÁ∫¶Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  // ÊòæÁ§∫ÂºÄÂßãÊúçÂä°Á°ÆËÆ§Ê°Ü
  const handleStartService = (appointment: Appointment) => {
    console.log("ScheduleManager: ÊòæÁ§∫ÂºÄÂßãÊúçÂä°Á°ÆËÆ§Ê°Ü", appointment)
    setStartAppointment(appointment)
    setShowStartConfirmModal(true)
  }

  // Á°ÆËÆ§ÂºÄÂßãÊúçÂä°
  const confirmStartService = async () => {
    if (!startAppointment) return
    
    try {
      console.log("üöÄ ScheduleManager: ====== ÂºÄÂßãÊúçÂä°ÊµÅÁ®ã ======")
      console.log("üöÄ ÂΩìÂâçÈ¢ÑÁ∫¶‰ø°ÊÅØ:", startAppointment)
      console.log("üöÄ ÂΩìÂâçÈ¢ÑÁ∫¶Áä∂ÊÄÅ:", startAppointment.status)
      console.log("üöÄ ÂΩìÂâçÈ¢ÑÁ∫¶ID:", startAppointment.id)
      
      // Êõ¥Êñ∞È¢ÑÁ∫¶Áä∂ÊÄÅ‰∏∫Â∑≤Á°ÆËÆ§ÔºàËøõË°å‰∏≠Ôºâ
      console.log("üöÄ ÂáÜÂ§áÊõ¥Êñ∞È¢ÑÁ∫¶Áä∂ÊÄÅ‰∏∫ confirmed...")
      const updateResult = await handleUpdateAppointment(startAppointment.id, { status: 'confirmed' })
      console.log("üöÄ È¢ÑÁ∫¶Áä∂ÊÄÅÊõ¥Êñ∞ÂÆåÊàê, ÁªìÊûú:", updateResult)
      
      // È™åËØÅÊõ¥Êñ∞ÊòØÂê¶ÊàêÂäü - ÈáçÊñ∞Ëé∑ÂèñÈ¢ÑÁ∫¶ËØ¶ÊÉÖ
      console.log("üöÄ È™åËØÅÊõ¥Êñ∞ÁªìÊûú...")
      try {
        const updatedAppointment = await getAppointmentDetail(startAppointment.id)
        console.log("üöÄ Êõ¥Êñ∞ÂêéÁöÑÈ¢ÑÁ∫¶ËØ¶ÊÉÖ:", updatedAppointment.data)
        console.log("üöÄ Êõ¥Êñ∞ÂêéÁöÑÈ¢ÑÁ∫¶Áä∂ÊÄÅ:", updatedAppointment.data.status)
        
        if (updatedAppointment.data.status !== 'confirmed') {
          console.error("‚ùå Áä∂ÊÄÅÊõ¥Êñ∞ÂºÇÂ∏∏ÔºÅÈ¢ÑÊúü: confirmed, ÂÆûÈôÖ:", updatedAppointment.data.status)
          toast.error(`Áä∂ÊÄÅÊõ¥Êñ∞ÂºÇÂ∏∏: ${updatedAppointment.data.status}`)
        } else {
          console.log("‚úÖ Áä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäüÁ°ÆËÆ§")
        }
      } catch (verifyError) {
        console.error("‚ùå È™åËØÅÊõ¥Êñ∞ÁªìÊûúÂ§±Ë¥•:", verifyError)
      }
      
      // ÂÖ≥Èó≠Á°ÆËÆ§Ê°Ü
      console.log("üöÄ ÂÖ≥Èó≠Á°ÆËÆ§ÂØπËØùÊ°Ü...")
      setShowStartConfirmModal(false)
      setStartAppointment(null)
      
      // ÂáÜÂ§áË∑≥ËΩ¨ÂèÇÊï∞
      const params = new URLSearchParams({
        familyId: startAppointment.patient?.family?.id?.toString() || '',
        familyName: startAppointment.patient?.family?.name || startAppointment.patient?.name || '',
        patientName: startAppointment.patient?.name || '',
        service: startAppointment.service_type?.name || '',
        time: startAppointment.start_time,
        address: startAppointment.patient?.family?.address || '',
        appointmentId: startAppointment.id.toString()
      })
      
      console.log("üöÄ Ë∑≥ËΩ¨ÂèÇÊï∞:", params.toString())
      console.log("üöÄ ÂáÜÂ§áË∑≥ËΩ¨Âà∞ËÆ∞ÂΩïÈ°µÈù¢...")
      
      // Á´ãÂç≥Ë∑≥ËΩ¨Âà∞ËÆ∞ÂΩïÈ°µÈù¢
      console.log("üöÄ ÊâßË°åË∑≥ËΩ¨...")
      router.push(`/records?${params.toString()}`)
      
    } catch (error) {
      console.error('‚ùå ScheduleManager: ÂºÄÂßãÊúçÂä°Â§±Ë¥•', error)
      console.error('‚ùå ÈîôËØØËØ¶ÊÉÖ:', error)
      toast.error('ÂºÄÂßãÊúçÂä°Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  // ÈáçÊñ∞ÂÆâÊéíÈ¢ÑÁ∫¶
  const handleRescheduleAppointment = async (appointmentId: number, newDateTime: { date: string, time: string }) => {
    try {
      console.log("ScheduleManager: ÈáçÊñ∞ÂÆâÊéíÈ¢ÑÁ∫¶", appointmentId, newDateTime)
      
      const response = await updateAppointment(appointmentId, {
        scheduled_date: newDateTime.date,
        scheduled_time: newDateTime.time
      })
      console.log("ScheduleManager: ÈáçÊñ∞ÂÆâÊéíÈ¢ÑÁ∫¶ÊàêÂäü", response.data)
      
      toast.success('È¢ÑÁ∫¶Êó∂Èó¥Â∑≤Ë∞ÉÊï¥')
      setShowRescheduleModal(false)
      loadAppointmentsByDate()
    } catch (error) {
      console.error('ScheduleManager: ÈáçÊñ∞ÂÆâÊéíÈ¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('Ë∞ÉÊï¥È¢ÑÁ∫¶Êó∂Èó¥Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  const handleUpdateAppointment = async (appointmentId: number, updates: Partial<CreateAppointmentRequest>) => {
    try {
      console.log("üìù ScheduleManager: ====== Êõ¥Êñ∞È¢ÑÁ∫¶ÂºÄÂßã ======")
      console.log("üìù È¢ÑÁ∫¶ID:", appointmentId)
      console.log("üìù Êõ¥Êñ∞ÂÜÖÂÆπ:", updates)
      console.log("üìù ÂΩìÂâçÈ¢ÑÁ∫¶ÂàóË°®ÈïøÂ∫¶:", appointments.length)
      
      const response = await updateAppointment(appointmentId, updates)
      console.log("üìù APIÊõ¥Êñ∞ÂìçÂ∫î:", response)
      console.log("üìù Êõ¥Êñ∞ÂêéÁöÑÈ¢ÑÁ∫¶Êï∞ÊçÆ:", response.data)
      console.log("üìù Êõ¥Êñ∞ÂêéÁöÑÈ¢ÑÁ∫¶Áä∂ÊÄÅ:", response.data.status)
      
      toast.success('È¢ÑÁ∫¶Êõ¥Êñ∞ÊàêÂäü')
      
      // ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ
      console.log("üìù ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ...")
      await loadAppointmentsByDate()
      console.log("üìù ÈáçÊñ∞Âä†ËΩΩÂÆåÊàêÔºåÊñ∞ÁöÑÈ¢ÑÁ∫¶ÂàóË°®ÈïøÂ∫¶:", appointments.length)
      
      // Â¶ÇÊûúÊ≠£Âú®Êü•ÁúãËØ¶ÊÉÖÔºåÊõ¥Êñ∞ËØ¶ÊÉÖÊï∞ÊçÆ
      if (selectedAppointment && selectedAppointment.id === appointmentId) {
        console.log("üìù Êõ¥Êñ∞ÂΩìÂâçÈÄâ‰∏≠ÁöÑÈ¢ÑÁ∫¶ËØ¶ÊÉÖ")
        setSelectedAppointment(response.data)
      }
      
      console.log("üìù ====== Êõ¥Êñ∞È¢ÑÁ∫¶ÂÆåÊàê ======")
      return response.data
      
    } catch (error) {
      console.error('‚ùå ScheduleManager: Êõ¥Êñ∞È¢ÑÁ∫¶Â§±Ë¥•', error)
      console.error('‚ùå ÈîôËØØËØ¶ÊÉÖ:', error)
      toast.error('Êõ¥Êñ∞È¢ÑÁ∫¶Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
      throw error // ÈáçÊñ∞ÊäõÂá∫ÈîôËØØÔºåËÆ©Ë∞ÉÁî®ÊñπÁü•ÈÅìÂ§±Ë¥•‰∫Ü
    }
  }

  const handleDeleteAppointment = async (appointmentId: number) => {
    try {
      console.log("ScheduleManager: Âà†Èô§È¢ÑÁ∫¶", appointmentId)
      
      await deleteAppointment(appointmentId)
      toast.success('È¢ÑÁ∫¶Âà†Èô§ÊàêÂäü')
      
      // ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ
      loadAppointmentsByDate()
      
      // Â¶ÇÊûúÊ≠£Âú®Êü•ÁúãËØ¶ÊÉÖÔºåËøîÂõûÂàóË°®
      if (selectedAppointment && selectedAppointment.id === appointmentId) {
        setSelectedAppointment(null)
      }
      
    } catch (error) {
      console.error('ScheduleManager: Âà†Èô§È¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('Âà†Èô§È¢ÑÁ∫¶Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  const handleCompleteAppointment = async (appointmentId: number) => {
    try {
      console.log("üèÅ ScheduleManager: ====== ÂÆåÊàêÈ¢ÑÁ∫¶Ë¢´Ë∞ÉÁî® ======")
      console.log("üèÅ Ë∞ÉÁî®Â†ÜÊ†à:", new Error().stack)
      console.log("üèÅ È¢ÑÁ∫¶ID:", appointmentId)
      
      // Ê∑ªÂä†Á°ÆËÆ§ÂØπËØùÊ°ÜÈò≤Ê≠¢ËØØÊìç‰Ωú
      const confirmed = window.confirm("Á°ÆÂÆöË¶ÅÂÆåÊàêËøô‰∏™È¢ÑÁ∫¶ÂêóÔºüÂÆåÊàêÂêéÂ∞ÜÊó†Ê≥ïÊí§ÈîÄ„ÄÇ")
      if (!confirmed) {
        console.log("üèÅ Áî®Êà∑ÂèñÊ∂àÂÆåÊàêÈ¢ÑÁ∫¶Êìç‰Ωú")
        return
      }
      
      const response = await completeAppointment(appointmentId)
      console.log("üèÅ ScheduleManager: ÂÆåÊàêÈ¢ÑÁ∫¶APIÂìçÂ∫î", response.data)
      
      toast.success('È¢ÑÁ∫¶Â∑≤ÂÆåÊàê')
      
      // ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ
      console.log("üèÅ ÈáçÊñ∞Âä†ËΩΩÈ¢ÑÁ∫¶Êï∞ÊçÆ...")
      loadAppointmentsByDate()
      
      // Â¶ÇÊûúÊ≠£Âú®Êü•ÁúãËØ¶ÊÉÖÔºåÊõ¥Êñ∞ËØ¶ÊÉÖÊï∞ÊçÆ
      if (selectedAppointment && selectedAppointment.id === appointmentId) {
        console.log("üèÅ Êõ¥Êñ∞ÈÄâ‰∏≠ÁöÑÈ¢ÑÁ∫¶ËØ¶ÊÉÖ")
        setSelectedAppointment(response.data)
      }
      
    } catch (error) {
      console.error('‚ùå ScheduleManager: ÂÆåÊàêÈ¢ÑÁ∫¶Â§±Ë¥•', error)
      toast.error('ÂÆåÊàêÈ¢ÑÁ∫¶Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  const handleInputChange = (field: string, value: string) => {
    setNewAppointment((prev) => ({
      ...prev,
      [field]: value,
    }))
  }

  if (selectedAppointment) {
    return (
      <div className="min-h-screen bg-gray-50">
        {/* ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÈ£éÊ†ºÁöÑÂØºËà™Ê†è */}
        <div className="sticky top-0 z-50 bg-white border-b border-gray-100">
          <div className="flex items-center justify-between px-4 py-3">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => setSelectedAppointment(null)} 
              className="p-2 rounded-lg hover:bg-gray-100 flex items-center gap-2"
            >
              <ChevronLeft className="h-5 w-5" />
              <span className="text-sm">ËøîÂõû</span>
            </Button>
            <h1 className="text-lg font-medium text-gray-900">ÊúçÂä°ËØ¶ÊÉÖ</h1>
            <div className="w-16"></div> {/* Âç†‰ΩçÁ¨¶‰øùÊåÅÂ±Ö‰∏≠ */}
          </div>
        </div>

        <div className={`${isMobile ? 'px-4 pb-6' : 'px-6 pb-8 max-w-4xl mx-auto'}`}>
          {/* ÊÇ£ËÄÖÂ§¥ÂÉèÂíåÂü∫Êú¨‰ø°ÊÅØÂç°Áâá */}
          <div className="bg-white rounded-xl shadow-sm mx-4 mt-4 mb-3 overflow-hidden">
            <div className="bg-gradient-to-r from-blue-500 to-blue-600 px-6 py-8 text-white relative">
              <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-8 translate-x-8"></div>
              <div className="relative">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center border-2 border-white/30">
                    <User className="h-8 w-8 text-white" />
                  </div>
                  <div>
                    <h2 className="text-xl font-semibold">{selectedAppointment.patient?.name || 'Êú™Áü•ÊÇ£ËÄÖ'}</h2>
                    <p className="text-blue-100 text-sm mt-1">{selectedAppointment.patient?.age}Â≤Å ¬∑ {selectedAppointment.patient?.relationship}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">È¢ÑÁ∫¶Áä∂ÊÄÅ</span>
                <Badge variant="outline" className={getStatusColor(selectedAppointment.status)}>
                  {getStatusText(selectedAppointment.status)}
                </Badge>
              </div>
            </div>
          </div>

          {/* ÊúçÂä°‰ø°ÊÅØÂç°Áâá */}
          <div className="bg-white rounded-xl shadow-sm mx-4 mb-3 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-50">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center">
                  <Clock className="h-4 w-4 text-blue-600" />
                </div>
                <h3 className="font-medium text-gray-900">ÊúçÂä°‰ø°ÊÅØ</h3>
              </div>
            </div>
            <div className="px-6 py-4 space-y-4">
              <div className="flex items-start justify-between">
                <span className="text-gray-600 text-sm">ÊúçÂä°Êó∂Èó¥</span>
                <span className="font-medium text-right">
                  {selectedAppointment.start_time}{selectedAppointment.end_time ? ` - ${selectedAppointment.end_time}` : ''}<br/>
                  {selectedAppointment.duration_minutes && (
                    <span className="text-xs text-gray-500">È¢ÑËÆ° {selectedAppointment.duration_minutes}ÂàÜÈíü</span>
                  )}
                </span>
              </div>
              <div className="w-full h-px bg-gray-100"></div>
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">ÊúçÂä°Á±ªÂûã</span>
                <span className="font-medium">{selectedAppointment.service_type?.name || 'Êú™ÊåáÂÆöÊúçÂä°'}</span>
              </div>
              <div className="w-full h-px bg-gray-100"></div>
              <div className="flex items-start justify-between">
                <span className="text-gray-600 text-sm">ÊúçÂä°Âú∞ÂùÄ</span>
                <div className="text-right max-w-48">
                  <span className="font-medium text-sm leading-relaxed">{selectedAppointment.patient?.family?.address || 'Âú∞ÂùÄÊú™Áü•'}</span>
                </div>
              </div>
            </div>
          </div>

          {/* ËÅîÁ≥ª‰ø°ÊÅØÂç°Áâá */}
          <div className="bg-white rounded-xl shadow-sm mx-4 mb-3 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-50">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-green-50 rounded-lg flex items-center justify-center">
                  <Phone className="h-4 w-4 text-green-600" />
                </div>
                <h3 className="font-medium text-gray-900">ËÅîÁ≥ªÊñπÂºè</h3>
              </div>
            </div>
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <span className="text-gray-600 text-sm">ËÅîÁ≥ªÁîµËØù</span>
                <a href={`tel:${selectedAppointment.patient?.phone || selectedAppointment.patient?.family?.phone}`} className="font-medium text-blue-600 hover:text-blue-700">
                  {selectedAppointment.patient?.phone || selectedAppointment.patient?.family?.phone || 'Êú™Áü•ÁîµËØù'}
                </a>
              </div>
            </div>
          </div>

          {/* Â•óÈ§ê‰ø°ÊÅØÂç°Áâá */}
          <div className="bg-white rounded-xl shadow-sm mx-4 mb-3 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-50">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-50 rounded-lg flex items-center justify-center">
                  <Package className="h-4 w-4 text-blue-600" />
                </div>
                <h3 className="font-medium text-gray-900">Â•óÈ§ê‰ø°ÊÅØ</h3>
              </div>
            </div>
            <div className="px-6 py-4 space-y-4">
              {(() => {
                const packageInfo = getFamilyPackageInfo(selectedAppointment.patient_id)
                return packageInfo ? (
                  <>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600 text-sm">Êà∑‰∏ªÂßìÂêç</span>
                      <span className="font-semibold text-gray-900">{packageInfo.householdHead}</span>
                    </div>
                    <div className="w-full h-px bg-gray-100"></div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-600 text-sm">ÊúçÂä°Â•óÈ§ê</span>
                      <span className="font-semibold text-blue-600">{packageInfo.packageName}</span>
                    </div>
                    {packageInfo.packageDetails && (
                      <>
                        <div className="w-full h-px bg-gray-100"></div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-600 text-sm">Â•óÈ§ê‰ª∑Ê†º</span>
                          <span className="font-semibold text-green-600">¬•{packageInfo.packageDetails.price}/Êúà</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-600 text-sm">ÊúçÂä°È¢ëÁéá</span>
                          <span className="text-gray-900">{packageInfo.packageDetails.service_frequency}Ê¨°/Êúà</span>
                        </div>
                      </>
                    )}
                  </>
                ) : (
                  <div className="text-center py-4 text-gray-500">
                    <span>Êú™ÊâæÂà∞Â•óÈ§ê‰ø°ÊÅØ</span>
                  </div>
                )
              })()}
            </div>
          </div>

          {/* Â§áÊ≥®‰ø°ÊÅØÂç°Áâá */}
          {selectedAppointment.notes && (
            <div className="bg-white rounded-xl shadow-sm mx-4 mb-6 overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-50">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-purple-50 rounded-lg flex items-center justify-center">
                    <AlertCircle className="h-4 w-4 text-purple-600" />
                  </div>
                  <h3 className="font-medium text-gray-900">Â§áÊ≥®‰ø°ÊÅØ</h3>
                </div>
              </div>
              <div className="px-6 py-4">
                <p className="text-sm text-gray-700 leading-relaxed">{selectedAppointment.notes}</p>
              </div>
            </div>
          )}
        </div>

        {/* Â∫ïÈÉ®Êìç‰ΩúÊ†è */}
        <div className="sticky bottom-0 bg-white border-t border-gray-100 px-4 py-4 space-y-3">
          {selectedAppointment.status === "scheduled" && (
            <Button 
              className="w-full bg-blue-600 hover:bg-blue-700 text-white rounded-xl py-3 font-medium" 
              size="lg"
              onClick={() => handleStartService(selectedAppointment)}
            >
              <Play className="h-5 w-5 mr-2" />
              ÂºÄÂßãÊúçÂä°
            </Button>
          )}

          {selectedAppointment.status === "confirmed" && (
            <div className={`grid gap-3 ${isMobile ? 'grid-cols-1' : 'grid-cols-2'}`}>
              <Button variant="outline" className="rounded-xl py-3 border-green-200 text-green-700 hover:bg-green-50" size="lg">
                <CheckCircle className="h-5 w-5 mr-2" />
                ÂÆåÊàêÊúçÂä°
              </Button>
              <Button variant="outline" className="rounded-xl py-3 border-orange-200 text-orange-700 hover:bg-orange-50" size="lg">
                <AlertCircle className="h-5 w-5 mr-2" />
                Ê†áËÆ∞ÂºÇÂ∏∏
              </Button>
            </div>
          )}

          <div className={`grid gap-3 ${isMobile ? 'grid-cols-1' : 'grid-cols-2'}`}>
            <Button variant="outline" className="rounded-xl py-3 border-blue-200 text-blue-700 hover:bg-blue-50" size="lg">
              <Phone className="h-5 w-5 mr-2" />
              ËÅîÁ≥ªÊÇ£ËÄÖ
            </Button>
            <Button 
              variant="outline" 
              className="rounded-xl py-3 border-gray-200 text-gray-700 hover:bg-gray-50" 
              size="lg"
              onClick={() => {
                setRescheduleAppointment(selectedAppointment)
                setRescheduleDate(selectedAppointment.scheduled_date)
                setRescheduleTime(selectedAppointment.start_time)
                setShowRescheduleModal(true)
              }}
            >
              <Edit className="h-5 w-5 mr-2" />
              Ë∞ÉÊï¥Êó∂Èó¥
            </Button>
          </div>

          {selectedAppointment.status !== "cancelled" && selectedAppointment.status !== "completed" && (
            <Button 
              variant="outline" 
              className="w-full rounded-xl py-3 border-red-200 text-red-700 hover:bg-red-50" 
              size="lg"
              onClick={() => handleCancelAppointment(selectedAppointment.id)}
            >
              <X className="h-5 w-5 mr-2" />
              ÂèñÊ∂àÈ¢ÑÁ∫¶
            </Button>
          )}
        </div>
      </div>
    )
  }

  return (
    <div className={`space-y-4 ${isMobile ? 'px-4 py-4' : 'px-6 py-6 max-w-2xl mx-auto'}`}>
      <div className="space-y-4">
        <div className="text-center py-2">
          <h1 className="text-2xl font-semibold text-gray-800">Êó•Á®ãÁÆ°ÁêÜ</h1>
          <p className="text-sm text-gray-600 mt-1">ÁÆ°ÁêÜÊØèÊó•ÊúçÂä°ÂÆâÊéí</p>
        </div>

        <Card className="shadow-none border-0 bg-white/80 backdrop-blur-sm rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => navigateDate("prev")} 
                className="p-3 rounded-full hover:bg-gray-100"
              >
                <ChevronLeft className="h-5 w-5" />
              </Button>
              <div className="text-center">
                <p className="font-semibold text-lg text-gray-800">
                  {formatDate(selectedDate)}
                </p>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => navigateDate("next")} 
                className="p-3 rounded-full hover:bg-gray-100"
              >
                <ChevronRight className="h-5 w-5" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card className="shadow-none border-0 bg-white/80 backdrop-blur-sm rounded-2xl">
        <CardContent className="p-6">
          <div className={`grid grid-cols-3 gap-4 text-center`}>
            <div className="bg-gradient-to-br from-blue-50 to-blue-100/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-blue-600">{appointments.length}</div>
              <div className="text-xs text-blue-700 mt-1">ÊÄªÈ¢ÑÁ∫¶</div>
            </div>
            <div className="bg-gradient-to-br from-indigo-50 to-indigo-100/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-indigo-600">{appointments.filter(app => app.status === 'scheduled' || app.status === 'confirmed').length}</div>
              <div className="text-xs text-indigo-700 mt-1">ËøõË°å‰∏≠</div>
            </div>
            <div className="bg-gradient-to-br from-green-50 to-green-100/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-green-600">{appointments.filter(app => app.status === 'completed').length}</div>
              <div className="text-xs text-green-700 mt-1">Â∑≤ÂÆåÊàê</div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="space-y-3">
        {loading ? (
          <div className="text-center py-8">
            <div className="text-gray-500">Âä†ËΩΩ‰∏≠...</div>
          </div>
        ) : appointments.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-gray-500">‰ªäÂ§©Ê≤°ÊúâÈ¢ÑÁ∫¶</div>
          </div>
        ) : (
          appointments.map((appointment) => (
          <Card
            key={appointment.id}
            className="shadow-none border-0 bg-white/80 backdrop-blur-sm rounded-2xl cursor-pointer hover:bg-white/90 transition-all duration-200 hover:scale-[1.02]"
            onClick={() => setSelectedAppointment(appointment)}
          >
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 text-primary" />
                  <span className="font-medium">{appointment.start_time}</span>
                  {appointment.duration_minutes && (
                    <span className="text-sm text-muted-foreground">({appointment.duration_minutes}ÂàÜÈíü)</span>
                  )}
                </div>
                <div className="flex gap-2">
                  <Badge variant="outline" className={getStatusColor(appointment.status)}>
                    {getStatusText(appointment.status)}
                  </Badge>
                  {(() => {
                    const packageInfo = getFamilyPackageInfo(appointment.patient_id)
                    return packageInfo ? (
                      <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                        {packageInfo.packageName}
                      </Badge>
                    ) : null
                  })()}
                </div>
              </div>

              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <MapPin className="h-3 w-3 text-muted-foreground" />
                  <span className="text-sm font-medium">
                    {appointment.patient?.name}ÂÆ∂ - {appointment.service_type?.name || 'Êú™ÊåáÂÆöÊúçÂä°'}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <User className="h-3 w-3 text-muted-foreground" />
                  <span className="text-sm text-muted-foreground">
                    {appointment.patient?.name} ({appointment.patient?.age}Â≤ÅÔºå{appointment.patient?.relationship}) |{" "}
                    {appointment.patient?.family?.address || 'Âú∞ÂùÄÊú™Áü•'}
                  </span>
                </div>
              </div>

              {appointment.status === "scheduled" && (
                <div className="flex gap-2 mt-3 pt-3 border-t">
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="flex-1 bg-transparent"
                    onClick={(e) => {
                      e.stopPropagation()
                      handleStartService(appointment)
                    }}
                  >
                    ÂºÄÂßã
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={(e) => {
                      e.stopPropagation()
                      setRescheduleAppointment(appointment)
                      setRescheduleDate(appointment.scheduled_date)
                      setRescheduleTime(appointment.start_time)
                      setShowRescheduleModal(true)
                    }}
                  >
                    Ë∞ÉÊï¥
                  </Button>
                  {appointment.status !== "cancelled" && appointment.status !== "completed" && (
                    <Button 
                      size="sm" 
                      variant="outline" 
                      className="text-red-600 bg-transparent border-red-200 hover:bg-red-50"
                      onClick={(e) => {
                        e.stopPropagation()
                        handleCancelAppointment(appointment.id)
                      }}
                    >
                      ÂèñÊ∂à
                    </Button>
                  )}
                </div>
              )}

              {appointment.status === "confirmed" && (
                <div className="flex gap-2 mt-3 pt-3 border-t">
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="flex-1 text-green-600 bg-transparent"
                    onClick={(e) => {
                      e.stopPropagation()
                      handleCompleteAppointment(appointment.id)
                    }}
                  >
                    ÂÆåÊàê
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="text-orange-600 bg-transparent"
                    onClick={(e) => {
                      e.stopPropagation()
                      handleUpdateAppointment(appointment.id, { status: 'cancelled' })
                    }}
                  >
                    ÂèñÊ∂à
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        ))
        )}
      </div>

      <Dialog open={showNewAppointmentModal} onOpenChange={setShowNewAppointmentModal}>
        <DialogTrigger asChild>
          <Button className="w-full bg-primary/90 hover:bg-primary rounded-2xl py-4 font-medium shadow-lg" variant="default">
            <Plus className="h-5 w-5 mr-2" />
            Ê∑ªÂä†Êñ∞È¢ÑÁ∫¶
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-md mx-auto max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              Ê∑ªÂä†Êñ∞È¢ÑÁ∫¶
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-4 py-4">
            {/* È¢ÑÁ∫¶Êó•Êúü */}
            <div>
              <Label htmlFor="date" className="text-sm font-medium">
                È¢ÑÁ∫¶Êó•Êúü
              </Label>
              <Input
                id="date"
                type="date"
                value={newAppointment.scheduled_date}
                min={new Date().toISOString().split('T')[0]} // ÈôêÂà∂‰∏çËÉΩÈÄâÊã©ËøáÂéªÊó•Êúü
                onChange={(e) => setNewAppointment(prev => ({ ...prev, scheduled_date: e.target.value }))}
                className="mt-1"
              />
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div>
                <Label htmlFor="time" className="text-sm font-medium">
                  È¢ÑÁ∫¶Êó∂Èó¥
                </Label>
                <Input
                  id="time"
                  type="time"
                  value={newAppointment.start_time}
                  onChange={(e) => setNewAppointment(prev => ({ ...prev, start_time: e.target.value }))}
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="duration" className="text-sm font-medium">
                  È¢ÑÁ∫¶Êó∂Èïø
                </Label>
                <Select value={newAppointment.duration_minutes.toString()} onValueChange={(value) => setNewAppointment(prev => ({ ...prev, duration_minutes: parseInt(value) }))}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="ÈÄâÊã©Êó∂Èïø" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30ÂàÜÈíü</SelectItem>
                    <SelectItem value="60">1Â∞èÊó∂</SelectItem>
                    <SelectItem value="90">1.5Â∞èÊó∂</SelectItem>
                    <SelectItem value="120">2Â∞èÊó∂</SelectItem>
                    <SelectItem value="150">2.5Â∞èÊó∂</SelectItem>
                    <SelectItem value="180">3Â∞èÊó∂</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div>
              <Label htmlFor="familyName" className="text-sm font-medium">
                ÊÇ£ËÄÖÂÆ∂Â∫≠
              </Label>
              <Select 
                value={newAppointment.patient_id > 0 ? newAppointment.patient_id.toString() : ""} 
                onValueChange={(value) => {
                  console.log('ÈÄâÊã©ÁöÑÂÄº:', value);
                  // Â¶ÇÊûúÂÄºÂåÖÂê´ "-"ÔºåËØ¥ÊòéÊòØ familyId-memberIndex Ê†ºÂºèÔºåÈúÄË¶ÅÁâπÊÆäÂ§ÑÁêÜ
                  const patientId = value.includes('-') ? 
                    parseInt(value.split('-')[0]) : // ‰ΩøÁî®ÂÆ∂Â∫≠ID‰Ωú‰∏∫‰∏¥Êó∂patient_id
                    parseInt(value);
                    
                  setNewAppointment(prev => ({ 
                    ...prev, 
                    patient_id: patientId
                  }));
                }}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue placeholder="ÈÄâÊã©ÊÇ£ËÄÖÂÆ∂Â∫≠" />
                </SelectTrigger>
                <SelectContent>
                  {families.map((family) => {
                    console.log('Ê∏≤ÊüìÂÆ∂Â∫≠:', family);
                    // ÂÖºÂÆπ‰∏çÂêåÁöÑÊï∞ÊçÆÁªìÊûÑÔºömembers Êàñ patients
                    const members = family.members || family.patients || [];
                    const familyName = family.householdHead || family.name || `ÂÆ∂Â∫≠${family.id}`;
                    
                    // Âè™ÊòæÁ§∫Êà∑‰∏ªÔºå‰∏çÊòæÁ§∫ÂÖ∂‰ªñÂÆ∂Â∫≠ÊàêÂëò
                    const householdHead = members.find(member => 
                      member.relationship === 'Êà∑‰∏ª' || member.relationship === 'householdHead'
                    );
                    
                    return householdHead ? (
                      <SelectItem 
                        key={`${family.id}-${householdHead.id || householdHead.name}`} 
                        value={householdHead.id?.toString() || `${family.id}-household`}
                      >
                        {familyName} - {householdHead.name} ({householdHead.age}Â≤Å, Êà∑‰∏ª)
                      </SelectItem>
                    ) : (
                      <SelectItem 
                        key={family.id} 
                        value={family.id?.toString()}
                        disabled
                      >
                        {familyName} - ÊöÇÊó†Êà∑‰∏ª‰ø°ÊÅØ
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-3 pt-4">
              <Button
                variant="outline"
                className="flex-1 bg-transparent"
                onClick={() => setShowNewAppointmentModal(false)}
              >
                ÂèñÊ∂à
              </Button>
              <Button
                className="flex-1"
                onClick={handleCreateAppointment}
                disabled={!newAppointment.start_time || newAppointment.duration_minutes === 0 || newAppointment.patient_id === 0}
              >
                ÂàõÂª∫È¢ÑÁ∫¶
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* ÈáçÊñ∞ÂÆâÊéíÈ¢ÑÁ∫¶ÂØπËØùÊ°Ü */}
      <Dialog open={showRescheduleModal} onOpenChange={setShowRescheduleModal}>
        <DialogContent className="max-w-md mx-auto">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold text-center text-gray-900 mb-4">
              Ë∞ÉÊï¥È¢ÑÁ∫¶Êó∂Èó¥
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-6 p-4">
            {rescheduleAppointment && (
              <div className="bg-gray-50 rounded-lg p-4 mb-4">
                <div className="text-sm text-gray-600 mb-2">ÂΩìÂâçÈ¢ÑÁ∫¶</div>
                <div className="font-medium">{rescheduleAppointment.patient?.name || `ÊÇ£ËÄÖID: ${rescheduleAppointment.patient_id}`}</div>
                <div className="text-sm text-gray-600">{rescheduleAppointment.scheduled_date} {rescheduleAppointment.start_time}</div>
              </div>
            )}

            <div className="space-y-4">
              <div>
                <Label htmlFor="reschedule-date">Êñ∞ÁöÑÊó•Êúü</Label>
                <Input
                  id="reschedule-date"
                  type="date"
                  value={rescheduleDate}
                  onChange={(e) => setRescheduleDate(e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="reschedule-time">Êñ∞ÁöÑÊó∂Èó¥</Label>
                <Input
                  id="reschedule-time"
                  type="time"
                  value={rescheduleTime}
                  onChange={(e) => setRescheduleTime(e.target.value)}
                  className="mt-1"
                />
              </div>
            </div>

            <div className="flex gap-3 pt-4">
              <Button
                variant="outline"
                className="flex-1 bg-transparent"
                onClick={() => setShowRescheduleModal(false)}
              >
                ÂèñÊ∂à
              </Button>
              <Button
                className="flex-1"
                onClick={() => {
                  if (rescheduleAppointment && rescheduleDate && rescheduleTime) {
                    handleRescheduleAppointment(rescheduleAppointment.id, {
                      date: rescheduleDate,
                      time: rescheduleTime
                    })
                  }
                }}
                disabled={!rescheduleDate || !rescheduleTime}
              >
                Á°ÆËÆ§Ë∞ÉÊï¥
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* ÂèñÊ∂àÈ¢ÑÁ∫¶Á°ÆËÆ§ÂØπËØùÊ°Ü */}
      <Dialog open={showCancelConfirmModal} onOpenChange={setShowCancelConfirmModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-red-600">
              <AlertCircle className="h-5 w-5" />
              Á°ÆËÆ§ÂèñÊ∂àÈ¢ÑÁ∫¶
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <h4 className="font-medium text-red-800 mb-2">ÂèñÊ∂àÈ¢ÑÁ∫¶‰ø°ÊÅØ</h4>
              {cancelAppointment && (
                <div className="space-y-2 text-sm text-red-700">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>ÊÇ£ËÄÖÔºö{cancelAppointment.patient?.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    <span>Êó∂Èó¥Ôºö{cancelAppointment.scheduled_date} {cancelAppointment.start_time}</span>
                  </div>
                  {cancelAppointment.notes && (
                    <div className="flex items-start gap-2">
                      <AlertCircle className="h-4 w-4 mt-0.5" />
                      <span>Â§áÊ≥®Ôºö{cancelAppointment.notes}</span>
                    </div>
                  )}
                </div>
              )}
            </div>
            
            <p className="text-sm text-gray-600">
              Á°ÆËÆ§Ë¶ÅÂèñÊ∂àËøô‰∏™È¢ÑÁ∫¶ÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ
            </p>

            <div className="flex gap-3 pt-4">
              <Button
                variant="outline"
                className="flex-1"
                onClick={() => {
                  setShowCancelConfirmModal(false)
                  setCancelAppointment(null)
                }}
              >
                ‰∏çÂèñÊ∂à
              </Button>
              <Button
                variant="destructive"
                className="flex-1"
                onClick={confirmCancelAppointment}
              >
                Á°ÆËÆ§ÂèñÊ∂à
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* ÂºÄÂßãÊúçÂä°Á°ÆËÆ§ÂØπËØùÊ°Ü */}
      <Dialog open={showStartConfirmModal} onOpenChange={setShowStartConfirmModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-blue-600">
              <Play className="h-5 w-5" />
              Á°ÆËÆ§ÂºÄÂßãÊúçÂä°
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h4 className="font-medium text-blue-800 mb-2">ÊúçÂä°‰ø°ÊÅØ</h4>
              {startAppointment && (
                <div className="space-y-2 text-sm text-blue-700">
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4" />
                    <span>ÂÆ∂Â∫≠Ôºö{startAppointment.patient?.name}ÂÆ∂</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span>ÊúçÂä°Ôºö{startAppointment.service_type?.name}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    <span>Êó∂Èó¥Ôºö{startAppointment.scheduled_date} {startAppointment.start_time}</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <MapPin className="h-4 w-4 mt-0.5" />
                    <span>Âú∞ÂùÄÔºö{startAppointment.patient?.family?.address || 'Âú∞ÂùÄÊú™Áü•'}</span>
                  </div>
                </div>
              )}
            </div>
            
            <p className="text-sm text-gray-600">
              Á°ÆËÆ§ÂºÄÂßã‰∏∫ËØ•ÂÆ∂Â∫≠Êèê‰æõÊúçÂä°ÂêóÔºüÂºÄÂßãÂêéÂ∞ÜËá™Âä®Ë∑≥ËΩ¨Âà∞ËÆ∞ÂΩïÈ°µÈù¢„ÄÇ
            </p>

            <div className="flex gap-3 pt-4">
              <Button
                variant="outline"
                className="flex-1"
                onClick={() => {
                  setShowStartConfirmModal(false)
                  setStartAppointment(null)
                }}
              >
                ÂèñÊ∂à
              </Button>
              <Button
                className="flex-1"
                onClick={confirmStartService}
              >
                Á°ÆËÆ§ÂºÄÂßã
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}

export default ScheduleManager
